services:
  # VSCode devcontainer
  dagster-pyiceberg-example:
    env_file: .env
    build:
      dockerfile: Dockerfile
      context: "."
    command: /bin/sh -c "while sleep 1000; do :; done"
    volumes:
      - ..:/home/vscode/workspace:cached
    networks:
      - dagster-pyiceberg-example
  # Polaris REST catalog
  polaris:
    build:
      context: "../."
      dockerfile: "polaris.Dockerfile"
    ports:
      - '8181:8181'
    networks:
      - dagster-pyiceberg-example
  # Bootstrap the Polaris catalog (this is a one-time operation)
  #  and sets up the persistence settings for the postgres backend
  # If you want to purge the database, then remove the volume, or
  #  optionally add another polaris container with the 'purge' command
  polaris-setup:
    build:
      context: "../."
      dockerfile: "polaris.Dockerfile"
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "bootstrap", "/app/polaris-server.yml" ]
    networks:
      - dagster-pyiceberg-example
  # Polaris will use postgres to persist settings & tables etc.
  #  NB: the environment variables here are linked with the environment
  #   variables in the 'polaris.Dockerfile'. If you change the settings here,
  #   then you must also update them in the dockerfile.
  postgres:
    image: postgres:17
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "pyiceberg", "-d", "pyiceberg"]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: pyiceberg
      POSTGRES_DB: default
      POSTGRES_PASSWORD: pyiceberg
    networks:
      - dagster-pyiceberg-example
  # Minio for storing the Iceberg tables
  minio:
    image: docker.io/bitnami/minio:2022
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - dagster-pyiceberg-example
    volumes:
      - 'minio-data:/data'
    environment:
      - MINIO_ROOT_USER=pyiceberg
      - MINIO_ROOT_PASSWORD=pyiceberg
      - MINIO_DEFAULT_BUCKETS=warehouse
      - MINIO_ACCESS_KEY=fhgsf678264687gdsjfhg
      - MINIO_SECRET_KEY=89899fsd3e347fah87nmcsa
  # For rate-limiting requests to the luchtmeetnet API
  redis:
    image: redis/redis-stack-server:6.2.6-v17
    restart: unless-stopped
    networks:
      - dagster-pyiceberg-example
    volumes:
      - redis-data:/data
    environment:
      REDIS_ARGS: --requirepass dagster --user dagster --port 16564

networks:
  dagster-pyiceberg-example:
    name: dagster-pyiceberg-example-network

volumes:
  postgres-data:
  redis-data:
  minio-data:
